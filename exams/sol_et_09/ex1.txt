a)
	i) Falsch, true ist die schwächste Zusicherung. Falsch schließt nämlich alles aus und ist somit
	sogar die stärkste Zusicherung

	ii) Richtig, da die lokale Konsistenz zugesichert wurde, kann rückwärts gehend
	vom Stop-Knoten auf false geschlossen werden, d.h. die Zusicherung am Stop-Knoten wird
	ebenfalls nicht erfüllt

	iii) Richtig, alle Stop-Knoten können nicht erreicht werden, das Programm terminiert
	also nicht.

	iv) y=z-10 ist die schwächste Vorbedingung von A. Diese erhalten wir, indem wir
	in A jedes Vorkommen von x durch y+5 ersetzen. D.h. um A wieder zu erhalten,
	müssen wir diese Substitution wieder rückgängig machen. Wir ersetzen also
	jedes y+5 durch ein x bzw. äquivalent jedes y durch x-5
	==> x-5=z-10 bzw. äquivalent x=z-5

b)
	i) Falsch
	f (g x) wertet zunächst x angewendet auf g aus und dieses Ergebnis angewendet auf f
	f g x wertet f mit g und x als Parameter aus.

	ii) Falsch
	In f ist die Funktion p definiert, die zwei Parameter benötigt. f wird nun
	als Aufruf für p definiert, wobei der erste Parameter den Wert von x erhält. 
	f benötigt also einen zweiten Parameter für b, um vollständig ausgeführt zu werden.
	==> Richtige Signatur wäre: int -> int -> int

	iii) Richtig
	fold_left ist endrekursiv, fold_right allerdings nicht
	Erinnerung: Endrekursiv bedeutet, dass der allerletzte ausgeführte Befehl
	einer Funktion der rekursive Aufruf ist.

	iv) Falsch
	Es werden Patterns erwartet, auf die Integer-Zahlen matchen, allerdings
	beschreibt das erste Pattern ein 2-Tupel.

	v) [2;1]
	map wertet die Funktion (fold_left (fun x y -> x + 1) 0) für jedes Element der Liste aus.
	Jedes Element der Liste ist wieder eine Liste ==> (fold_left (fun x y -> x + 1) 0) zählt
	die Anzahl der Elemente in jeder Liste in der Liste.

	vi) 10
	Lokale Definitionen können nur auf vorhergehende Variablen zugreifen (Ausnahme:
	eine mit rec definierte Funktion kann sich selbst aufrufen).
	==> Bei der Definition von f wird x bereits mit 5 ersetzt und f wird dann mit 5 als
	Parameter aufgerufen ==> f 5 => 5+5 => 10

c)
	i) Richtig
	e=>v bedeutet, dass sich der Ausdruck e in (Mini)-OCaml zu v auswertet, also insbesondere
	auch terminiert.

	ii) Richtig
	Mit e´ und e´´ terminieren gilt e´=>v´ und e´´=>v´´ für zwei Werte v´ und v´´.
	Somit gilt also auch mit der Listenregel e´::e´´=>v´::v´´
	und somit auch e=>v´::v´´.
	Dadurch ist nun also für e die Pattern-Matching-Regel anwendbar, wodurch die Behauptung folgt.

