1) Verifikation

	a) Falsch
	true ist die schwächste Zusicherung. Falsch schließt nämlich alles aus und ist somit
	sogar die stärkste Zusicherung

	b) Falsch
	x<0 ist eine schwächere Zusicherung als x<-1
	Es gilt	x<-1 => x<0 aber nicht x<0 => x<-1
	(eine stärkere Zusicherung impliziert immer eine schwächere)

	c) Falsch
	Zum Beweis muss die lokale Konsistenz gezeigt werden

	d) Richtig
	Es gilt: A^B => C ≡ not(A^B) v C ≡ not(A) v not(B) v C
		≡ not(A) v (B => C) ≡ A => (B => C)

	e) Richtig
	Eine Schleifeninvariante muss vor dem ersten Betreten, vor jedem weiteren Betreten
	und vor Verlassen der Schleife gelten. Da x immer größer als y ist und sich dies in der Schleife nicht ändert, ist die Invariante gültig.

2) OCaml <3

	a) Richtig
	(f g) x wertet zunächst g angewendet auf f aus (Currying) und wendet dann x auf dieses Ergebnis an.
	f g x wertet f direkt mit g und x als Parameter aus. Beide Aufrufe ergeben schlussendlich dasselbe Ergebnis.

	b) Falsch 
	In f ist die Funktion p definiert, die zwei Parameter benötigt. f wird nun
	als Aufruf für p definiert, wobei der erste Parameter den Wert von x erhält. 
	f benötigt also einen zweiten Parameter für b, um vollständig ausgeführt zu werden.
	==> Richtige Signatur wäre: int -> int -> int

	c) Richtig

	d) 'a -> ('a -> 'a) list -> 'a
	Da der neue Akkumulator in der übergebenen Funktion durch x a berechnet wird,
	muss die Liste Funktionen enthalten, die den Typ des Akkumulators
	aufnehmen können und den selben Typ wieder zurückgeben müssen.

	e) 2
	Der Aufruf x 2 sieht die zuletzt definierte Version von x,
	nämlich die Funktion, die einen Parameter namens x nimmt,
	übergibt dieser Funktion 2 als Parameter und diese Funktion
	gibt dann ihren Parameter zurück (der Parametername x verschattet
	die rekursiv definierte Funktion)

	f) ('a -> 'a) -> 'a -> 'a
	% ist der Funktionskompositionsoperator in OCaml, d.h. x%x entspricht fun z -> x(x z)
	bzw. mit anderen Variablennamen: f%g entspricht fun i -> f(g i)
	Dies bedeutet, fun x -> x%x verlangt eine Funktion, dessen Eingabe und Ausgabetyp vom
	selben Typ sind (also z.B. ('a->'a) ), und damit die Funktionskomposition ausgeführt 
	werden kann, wird noch ein Eingabewert verlangt.

3) Verifikation

	a) Richtig
	Da e=>e'::e'' gilt, gilt auch e=e'::e'' und e terminiert
	Somit gilt die Regel durch Anwendung der Pattern-Matching-Regel
	Siehe auch Folien Seite 346

	b) Richtig
	Nach VL ist ein Wert ein Ausdruck, der nicht weiter vereinfacht werden kann.
	Siehe Folien Seite 316, 318

	c) Richtig 
	(bin ich mir zu 95% sicher, man korrigiere mich, falls es falsch ist)
